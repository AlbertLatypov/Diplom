import numpy as np
from matplotlib import pylab as plt
from math import sqrt
 
def rk4(f, x0, y0, x1, n):
    vx = [0] * (n + 1)
    vy = [0] * (n + 1)
    h = (x1 - x0) / float(n)
    vx[0] = x = x0
    vy[0] = y = y0
    for i in range(1, n + 1):
        k1 =  f(x, y)
        k2 =  f(x + 0.5 * h, y + 0.5*h * k1)
        k3 =  f(x + 0.5 * h, y + 0.5*h * k2)
        k4 =  f(x + h, y + h*k3)
      
        vx[i] = x = round( x0 + i * h, 5 )
        vy[i] = y = round( vy[i-1] + (k1 + k2 + k2 + k3 + k3 + k4)*h / 6, 5 )
    return vx,vy

As=0.2
J0=1000
R=0.05
w=5.82/10000
q=0
eps=0.8
sigm=5.67/100000000
p=2700
Cp=920
delta=0.5/1000

print ("""  Исходное уравнение:
dT/dt  =  (  As*J0*(1+R*np.sin(w*t)) + q - 2*eps*sigm*y*y*y*y  )  /  (  p*Cp*delta  )""")       
print ( "T(t0) = T0 = ",sqrt(sqrt((As*J0)/(2*eps*sigm))) ,'\n', )



print (""" Параметры уравнения:
As=0.2
J0=1000
R=0.05
w=5.82/10000
q=0
eps=0.8
sigm=5.67/100000000
p=2700
Cp=920
delta=0.5/1000 \n """)


dT=[]
dJ=[]

def f(x, y):
    return (As*J0*(1+R*np.sin(w*x)) + q - 2*eps*sigm*y*y*y*y) / (p*Cp*delta)


vx, vy =  rk4(f, 0, round(sqrt(sqrt((As*J0)/(2*eps*sigm))),5) , 3000, 25)
print(' Для промежутка времени 0<=t<=3000 и шага h=120 найдем :')
print("\nt:           T(t):            T(t)-T(0):     J(t)-J(0):")
for x, y in list(zip(vx, vy))[::]:
    dT.append(round(       y-sqrt(sqrt((As*J0)/(2*eps*sigm)))          ,5))
    dJ.append(round(       1000*(1+0.05*np.sin(5.82/10000*x))-1000     ,5))
    print("%6.1f      %10.5f     %10.5f     %10.5f " % (x, y, y-sqrt(sqrt((As*J0)/(2*eps*sigm))),1000*(1+0.05*np.sin(5.82/10000*x))-1000     )              )

#print(dJ)
#print(dT)    

fig = plt.figure(figsize=(8,8), dpi=120)
plt.xlabel('t')
plt.ylabel('T(t)')
plt.plot(vx, vy)

fig1 = plt.figure(dpi=120)
x= np.arange(0, 3100, 100)
plt.xlabel('t')
plt.ylabel('J(t) = J0*(1+R*sin(w*t))')
plt.plot(x, 1000*(1+0.05*np.sin(5.82/10000*x))      )


a11, a12, a13, a21, a22, a23, a31, a32, a33 = 0,0,0,0,0,0,0,0,0
b1,b2,b3 = 0,0,0
for i in range (1,26):
    a11 +=dJ[i]*dJ[i]
    a12 +=dJ[i-1]*dJ[i]
    a13 +=dT[i-1]*dJ[i]
    b1  +=dT[i]*dJ[i]

    a21 +=dJ[i]*dJ[i-1]
    a22 +=dJ[i-1]*dJ[i-1]
    a23 +=dT[i-1]*dJ[i-1]
    b2  +=dT[i]*dJ[i-1]

    a31 +=dJ[i]*dT[i-1]
    a32 +=dJ[i-1]*dT[i-1]
    a33 +=dT[i-1]*dT[i-1]
    b3  +=dT[i]*dT[i-1]
    
A= np.array([[a11, a12, a13],[a21, a22, a23],[a31, a32, a33]])
B = np.array([b1,b2,b3])
BDG = np.linalg.solve(A, B)
print("\nСоставим систему (17) и решим ее :\n (B,D,G)  *\n\n", A ,'\n\n = ', B  )
print("\n\n  B:            D:            G:")
print(BDG)
e1= -    (p*Cp*delta*np.log(BDG[2]))   / (8*sigm*pow(216.6864420114564,3)*15)
print('\n\nНайдем значения (18),(19):')
print('eps = ',e1)
As1= (      p*Cp*delta*BDG[0]*np.log(BDG[2])*np.log(BDG[2])     )/(   (BDG[2]-1-np.log(BDG[2]))*15     )
print('As = ',As1)
plt.show()

